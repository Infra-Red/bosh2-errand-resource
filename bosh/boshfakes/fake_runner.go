// Code generated by counterfeiter. DO NOT EDIT.
package boshfakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry-community/bosh2-errand-resource/bosh"
)

type FakeRunner struct {
	ExecuteStub        func(commandOpts interface{}) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		commandOpts interface{}
	}
	executeReturns struct {
		result1 error
	}
	executeReturnsOnCall map[int]struct {
		result1 error
	}
	ExecuteWithDefaultOverrideStub        func(commandOpts interface{}, override func(interface{}) (interface{}, error), writer io.Writer) error
	executeWithDefaultOverrideMutex       sync.RWMutex
	executeWithDefaultOverrideArgsForCall []struct {
		commandOpts interface{}
		override    func(interface{}) (interface{}, error)
		writer      io.Writer
	}
	executeWithDefaultOverrideReturns struct {
		result1 error
	}
	executeWithDefaultOverrideReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunner) Execute(commandOpts interface{}) error {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		commandOpts interface{}
	}{commandOpts})
	fake.recordInvocation("Execute", []interface{}{commandOpts})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(commandOpts)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.executeReturns.result1
}

func (fake *FakeRunner) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeRunner) ExecuteArgsForCall(i int) interface{} {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].commandOpts
}

func (fake *FakeRunner) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) ExecuteReturnsOnCall(i int, result1 error) {
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) ExecuteWithDefaultOverride(commandOpts interface{}, override func(interface{}) (interface{}, error), writer io.Writer) error {
	fake.executeWithDefaultOverrideMutex.Lock()
	ret, specificReturn := fake.executeWithDefaultOverrideReturnsOnCall[len(fake.executeWithDefaultOverrideArgsForCall)]
	fake.executeWithDefaultOverrideArgsForCall = append(fake.executeWithDefaultOverrideArgsForCall, struct {
		commandOpts interface{}
		override    func(interface{}) (interface{}, error)
		writer      io.Writer
	}{commandOpts, override, writer})
	fake.recordInvocation("ExecuteWithDefaultOverride", []interface{}{commandOpts, override, writer})
	fake.executeWithDefaultOverrideMutex.Unlock()
	if fake.ExecuteWithDefaultOverrideStub != nil {
		return fake.ExecuteWithDefaultOverrideStub(commandOpts, override, writer)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.executeWithDefaultOverrideReturns.result1
}

func (fake *FakeRunner) ExecuteWithDefaultOverrideCallCount() int {
	fake.executeWithDefaultOverrideMutex.RLock()
	defer fake.executeWithDefaultOverrideMutex.RUnlock()
	return len(fake.executeWithDefaultOverrideArgsForCall)
}

func (fake *FakeRunner) ExecuteWithDefaultOverrideArgsForCall(i int) (interface{}, func(interface{}) (interface{}, error), io.Writer) {
	fake.executeWithDefaultOverrideMutex.RLock()
	defer fake.executeWithDefaultOverrideMutex.RUnlock()
	return fake.executeWithDefaultOverrideArgsForCall[i].commandOpts, fake.executeWithDefaultOverrideArgsForCall[i].override, fake.executeWithDefaultOverrideArgsForCall[i].writer
}

func (fake *FakeRunner) ExecuteWithDefaultOverrideReturns(result1 error) {
	fake.ExecuteWithDefaultOverrideStub = nil
	fake.executeWithDefaultOverrideReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) ExecuteWithDefaultOverrideReturnsOnCall(i int, result1 error) {
	fake.ExecuteWithDefaultOverrideStub = nil
	if fake.executeWithDefaultOverrideReturnsOnCall == nil {
		fake.executeWithDefaultOverrideReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeWithDefaultOverrideReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.executeWithDefaultOverrideMutex.RLock()
	defer fake.executeWithDefaultOverrideMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bosh.Runner = new(FakeRunner)
